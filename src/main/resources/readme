创建型模式
    1. Abstract Factory     抽象工厂
    2. Builder              创建者模式
    3. Factory Method       工厂方法
    4. Prototype            原型模式
    5. Singleton            单例模式

结构型模式
    1. Adapter              适配器模式
    2. Bridge               桥接模式
    3. Composite            组合模式
    4. Decorator            装饰器模式
    5. Facade               外观模式
    6. Flyweight            享元模式
    7. Proxy                代理模式

行为型模式
    1. Chain of Responsibility    责任链模式
    2. Command                    命令模式
    3. Interpreter                解释器模式
    4. Iterator                   迭代器模式
    5. Mediator                   中介者模式
    6. Memento                    备忘录模式
    7. Observer                   观察者模式
    8. State                      状态模式
    9. Strategy                   策略模式
    10. Template Method           模板方法
    11. Visitor                   访问者模式



设计原则
    1. 单一职责原则（Single Responsibility Principle）
        一个类别太大，别太累，负责单一的职责
        高内聚，低耦合
    2. 开闭原则（Open-Closed -Principle）
        对扩展开放，对修改关闭
            尽量不修改原来代码的情况下进行扩展
        抽象化，多态是开闭原则的关键
    3. 里氏替换原则（Liscov Substitution Principle）
        所有使用父类的地方，必须能够透明的使用子类对象
    4. 依赖倒置原则（Dependency Inversion Priciple）
        依赖抽象，而不是依赖具体
        面向抽象编程（面向接口编程）
    5. 接口隔离原则（Interface Segregation Principle）
        每一个接口应该承担独立的角色，不干不该自己干的事儿
            Flyable Runnable 不该合二为一
            避免子类实现不需要实现的方法
            需要对客户提供接口的时候，只需要暴露最小的接口
    6. 迪米特法则
        降低耦合

总结：
    1. 总纲，对扩展开放，对修改关闭
    2. 类的职责要单一
    3. 子类可以透明替换父类
    4. 面向接口编程
    5. 接口的职责要单一
    6. 降低耦合






















